<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../dtd/dblite.dtd" [
<!ENTITY % Symbols SYSTEM "Symbols.ent">
%Symbols;
]>
<section>
	<title>Special</title>
	<section id="fact">
		<title>fact function</title>
		<indexterm><primary>fact function</primary></indexterm>
		<indexterm><primary>factorial</primary></indexterm>
		<para>
			Returns the factorial of the argument.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>fact(z)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
			  The <function>fact</function> function returns the factorial of <parameter>n</parameter>, commonly written as n!.
				<parameter>n</parameter> may be any <glossterm>numeric expression</glossterm> that evaluates to a positive <glossterm>integer</glossterm>.
				The function is defined as <mathphrase>fact(n)=n(n-1)(n-2)...1</mathphrase>,
				and relates to the <function><link linkend="gamma">gamma</link></function> function as <mathphrase>fact(n)=gamma(n+1)</mathphrase>.
			</para>
		</simplesect>
	</section>


	<section id="gamma">
		<title>gamma function</title>
		<indexterm><primary>gamma function</primary></indexterm>
		<indexterm><primary>factorial</primary></indexterm>
		<para>
			Returns the value of the Euler gamma function of the argument.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>gamma(z)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>gamma</function> function returns the result of the Euler gamma function of <parameter>z</parameter>, commonly written as &Gamma;(z).
				<parameter>z</parameter> may be any <glossterm>numeric expression</glossterm> that evaluates to a <glossterm>real number</glossterm> or a <glossterm>complex number</glossterm>.
				The gamma function relates to the factorial function as <mathphrase>fact(n)=gamma(n+1)</mathphrase>.
				The mathematical definition of the gamma function is:
				<mediaobject>
	  			<imageobject  role="fo"><imagedata  format="SVG"  fileref="Dummy.svg"/></imageobject>
  				<imageobject  role="html"><imagedata  format="EMF"  fileref="Gamma.emf"/></imageobject>
				</mediaobject>
				This cannot be calculated precisely, so Graph is using the so-called Lanczos approximation to calculate the <function>gamma</function> function.
			</para>
		</simplesect>
	</section>


	<section id="beta">
		<title>beta function</title>
		<indexterm><primary>beta function</primary></indexterm>
		<para>
			Returns the value of the Euler beta function evaluated for the arguments.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>beta(m, n)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>beta</function> function returns the result of the Euler beta function evaluated for <parameter>m</parameter> and <parameter>n</parameter>.
				<parameter>m</parameter> and <parameter>n</parameter> may be any <glossterm baseform="numeric expression">numeric expressions</glossterm>
				that evaluate to <glossterm baseform="real number">real numbers</glossterm> or <glossterm baseform="complex number">complex numbers</glossterm>.
				The <function>beta</function> function relates to the <function><link linkend="gamma">gamma</link></function> function as
				<mathphrase>beta(m, n) = gamma(m) * gamma(n) / gamma(m+n)</mathphrase>.
			</para>
		</simplesect>
	</section>


	<section id="w">
		<title>W function</title>
		<indexterm><primary>W function</primary></indexterm>
		<indexterm><primary>Lambert W-function</primary></indexterm>
		<indexterm><primary>omega function</primary></indexterm>
		<para>
			Returns the value of the Lambert W-function evaluated for the argument.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>W(z)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
			  The <function>W</function> function returns the result of the Lambert W-function, also known as the omega function, evaluated for <parameter>z</parameter>.
				<parameter>z</parameter> may be any <glossterm>numeric expression</glossterm> that evaluates to a <glossterm>real number</glossterm> or a <glossterm>complex number</glossterm>.
				The inverse of the <function>W</function> function is given by <mathphrase>f(W)=W*e<superscript>W</superscript></mathphrase>.
			</para>
		</simplesect>
		<simplesect>
			<title>Remarks</title>
			<para>
				The <function>W</function> function is not defined for real values of <parameter>z</parameter> when <parameter>z</parameter> &lt; -1/e.
			</para>
		</simplesect>
	</section>


	<section id="zeta">
		<title>zeta function</title>
		<indexterm><primary>zeta function</primary></indexterm>
		<indexterm><primary>Riemann Zeta function</primary></indexterm>
		<para>
			Returns the value of the Riemann Zeta function evaluated for the argument.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>zeta(z)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
			  The <function>zeta</function> function returns the result of the Riemann Zeta function, commonly written as &zeta;(s).
				<parameter>z</parameter> may be any <glossterm>numeric expression</glossterm> that evaluates to a <glossterm>real number</glossterm> or a <glossterm>complex number</glossterm>.
			</para>
		</simplesect>
		<simplesect>
			<title>Remarks</title>
			<para>
				The <function>zeta</function> function is defined for the whole complex plane except for the pole at <parameter>z</parameter>=1.
			</para>
		</simplesect>
	</section>


	<section id="mod">
		<title>mod function</title>
		<indexterm><primary>mod function</primary></indexterm>
		<indexterm><primary>modulus</primary></indexterm>
		<indexterm><primary>remainder</primary></indexterm>
		<para>
			Returns the remainder of the first argument divided by the second argument.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>mod(m,n)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				Calculates <parameter>m</parameter> modulo <parameter>n</parameter>, the remainder of <mathphrase>m/n</mathphrase>.
				<function>mod</function> calculates the remainder f, where <mathphrase>m = a*n + f</mathphrase> for some integer a.
				The sign of f is always the same as the sign of <parameter>n</parameter>.
				When <parameter>n</parameter>=0, mod returns 0.
				<parameter>m</parameter> and <parameter>n</parameter> may be any <glossterm baseform="numeric expression">numeric expressions</glossterm> that evaluate to <glossterm baseform="real number">real numbers</glossterm>.
			</para>
		</simplesect>
	</section>


	<section id="min">
		<title>min function</title>
		<indexterm><primary>min function</primary></indexterm>
		<indexterm><primary>minimum</primary></indexterm>
		<para>
			Finds and returns the minimum of the values passed as arguments.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>min(A,B,...)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>min</function> function returns the minimum value of its arguments.
				<function>min</function> can take any number of arguments not less than 2.
				The arguments may be any <glossterm baseform="numeric expression">numeric expressions</glossterm>
				that evaluate to <glossterm baseform="real number">real numbers</glossterm> or <glossterm baseform="complex number">complex numbers</glossterm>.
				If the arguments are complex numbers, the function returns <mathphrase>min(re(A), re(B), ...) + min(im(A), im(B), ...)&imag;</mathphrase>.
			</para>
		</simplesect>
	</section>


	<section id="max">
		<title>max function</title>
		<indexterm><primary>max function</primary></indexterm>
		<indexterm><primary>maximum</primary></indexterm>
		<para>
			Finds and returns the maximum of the values passed as arguments.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>max(A,B,...)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>max</function> function returns the maximum value of its arguments.
				<function>max</function> can take any number of arguments not less than 2.
				The arguments may be any <glossterm baseform="numeric expression">numeric expressions</glossterm>
				that evaluate to <glossterm baseform="real number">real numbers</glossterm> or <glossterm baseform="complex number">complex numbers</glossterm>.
				If the arguments are complex numbers, the function returns <mathphrase>max(re(A), re(B), ...) + max(im(A), im(B), ...)&imag;</mathphrase>.
			</para>
		</simplesect>
	</section>


	<section id="range">
		<title>range function</title>
		<indexterm><primary>range function</primary></indexterm>
		<para>
			Returns the second argument if it is in the range between the first argument and the third argument.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>range(A,z,B)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>range</function> function returns <parameter>z</parameter>,
				if <parameter>z</parameter> is greater than <parameter>A</parameter> and less than <parameter>B</parameter>.
				If <parameter>z</parameter> &lt; <parameter>A</parameter> then <parameter>A</parameter> is returned.
				If <parameter>z</parameter> > <parameter>B</parameter> then <parameter>B</parameter> is returned.
				The arguments may be any <glossterm baseform="numeric expression">numeric expressions</glossterm>
				that evaluate to <glossterm baseform="real number">real numbers</glossterm> or <glossterm baseform="complex number">complex numbers</glossterm>.
				The function has the same effect as <mathphrase>max(A, min(z, B))</mathphrase>.
			</para>
		</simplesect>
	</section>


	<section id="if">
		<title>if function</title>
		<indexterm><primary>if function</primary></indexterm>
		<para>
			Returns the second argument if the first argument evaluates to a value different from zero, else the third value is returned.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>if(cond,a,b)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>if</function> function returns <parameter>a</parameter> if <parameter>cond</parameter> evaluates to a value different from 0.
				If <parameter>cond</parameter> evaluates to 0, <parameter>b</parameter> is returned.
				The arguments may be any <glossterm baseform="numeric expression">numeric expressions</glossterm>
				that evaluate to <glossterm baseform="real number">real numbers</glossterm> or <glossterm baseform="complex number">complex numbers</glossterm>.
			</para>
		</simplesect>
	</section>


	<section id="ifseq">
		<title>ifseq function</title>
		<indexterm><primary>ifseq function</primary></indexterm>
		<para>
			Evaluates a sequence of if functions and returns the first result found with a condition different from zero.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>ifseq(cond1, f1, cond2, f2, ... , condn, fn [,fz])</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>ifseq</function> function evaluates <parameter>cond1</parameter> and if it is different from 0 then <parameter>f1</parameter> is evaluated and returned.
				Else <parameter>cond2</parameter> is evaluated and if it is different from 0 then <parameter>f2</parameter> is returned and so forth.
				If none of the conditions are true <parameter>fz</parameter> is returned.
				<parameter>fz</parameter> is optional and if not specified <function>ifseq</function> returns an error if none of the conditions are true.
				If <parameter>ifseq</parameter> has 3 arguments it will be the same as the <function>if</function> function.
				The arguments may be any <glossterm baseform="numeric expression">numeric expressions</glossterm>
				that evaluate to <glossterm baseform="real number">real numbers</glossterm> or <glossterm baseform="complex number">complex numbers</glossterm>.
			</para>
		</simplesect>
	</section>


	<section id="integrate">
		<title>integrate function</title>
		<indexterm><primary>integrate function</primary></indexterm>
		<indexterm><primary>numeric integral</primary></indexterm>
		<indexterm><primary>area</primary></indexterm>
		<para>
			Returns the numeric integral of the first argument from the second to the third argument.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>integrate(f,a,b)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>integrate</function> function returns the numeric integral of <parameter>f</parameter> from <parameter>a</parameter> to <parameter>b</parameter>.
				This is mathematical written as:
				<mediaobject>
	  			<imageobject role="fo"><imagedata  format="SVG"  fileref="Dummy.svg"/></imageobject>
  				<imageobject role="html"><imagedata  format="EMF"  fileref="Integrate.emf"/></imageobject>
				</mediaobject>
				This integral is the same as the area between the function <parameter>f</parameter> and the x-axis from <parameter>a</parameter> to <parameter>b</parameter>
				where the area under the axis is counted negative.
				<parameter>f</parameter> may be any function with x as variable if the function is used in a normal function and t as variable if it is a parameteric function.
				<parameter>a</parameter> and <parameter>b</parameter> may be any <glossterm baseform="numeric expression">numeric expressions</glossterm> that evaluate to <glossterm baseform="real number">real numbers</glossterm>.
				<function>integrate</function> does not calculate the integral exact.
				Instead the calculation is done using Simpson's Rule with 100 steps.
			</para>
		</simplesect>
	</section>


	<section id="sum">
		<title>sum function</title>
		<indexterm><primary>sum function</primary></indexterm>
		<indexterm><primary>summation</primary></indexterm>
		<para>
			Returns the summation of the first argument evaluated for all integers from the second to the third parameter.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>sum(f,a,b)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>sum</function> function returns the summation of <parameter>f</parameter> evaluated for all integers from <parameter>a</parameter> to <parameter>b</parameter>.
				This is mathematical written as:
				<mediaobject>
	  			<imageobject role="fo"><imagedata  format="SVG"  fileref="Dummy.svg"/></imageobject>
  				<imageobject role="html"><imagedata  format="EMF"  fileref="Sum.emf"/></imageobject>
				</mediaobject>
				<parameter>f</parameter> may be any function with x as variable if the function is used in a normal function and t as variable if it is a parameteric or polar function.
				<parameter>a</parameter> and <parameter>b</parameter> may be any <glossterm baseform="numeric expression">numeric expressions</glossterm> that evaluate to <glossterm baseform="real number">real numbers</glossterm>.
				<function>integrate</function> does not calculate the integral exact.
			</para>
		</simplesect>
	</section>


	<section id="product">
		<title>product function</title>
		<indexterm><primary>product function</primary></indexterm>
		<para>
			Returns the product of the first argument evaluated for all integers from the second to the third parameter.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>product(f,a,b)</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>product</function> function returns the product of <parameter>f</parameter> evaluated for all integers from <parameter>a</parameter> to <parameter>b</parameter>.
				This is mathematical written as:
				<mediaobject>
	  			<imageobject role="fo"><imagedata  format="SVG"  fileref="Dummy.svg"/></imageobject>
  				<imageobject role="html"><imagedata  format="EMF"  fileref="Product.emf"/></imageobject>
				</mediaobject>
				<parameter>f</parameter> may be any function with x as variable if the function is used in a normal function and t as variable if it is a parameteric or polar function.
				<parameter>a</parameter> and <parameter>b</parameter> may be any <glossterm baseform="numeric expression">numeric expressions</glossterm> that evaluate to <glossterm baseform="real number">real numbers</glossterm>.
				<function>integrate</function> does not calculate the integral exact.
			</para>
		</simplesect>
	</section>


	<section id="dnorm">
		<title>dnorm function</title>
		<indexterm><primary>dnorm function</primary></indexterm>
		<para>
			Returns the normal distribution of the first argument with optional mean value and standard deviation.
		</para>
		<simplesect>
			<title>Syntax</title>
			<para>dnorm(x, [&mu;,&sigma;])</para>
		</simplesect>
		<simplesect>
			<title>Description</title>
			<para>
				The <function>dnorm</function> function is the probability density of the normal distribution, also called Gaussian distribution.
				<parameter>x</parameter> is the variate, <parameter>&mu;</parameter> is the mean value and <parameter>&sigma;</parameter> is the standard deviation.
				<parameter>&mu;</parameter> and <parameter>&sigma;</parameter> are optional
				and if left out the standard normal distribution is used where <parameter>&mu;</parameter>=0 and <parameter>&sigma;</parameter>=1.
				<parameter>x</parameter>, <parameter>&mu;</parameter> and <parameter>&sigma;</parameter> may be any <glossterm baseform="numeric expression">numeric expressions</glossterm>
				that evaluate to <glossterm baseform="real number">real numbers</glossterm> where <parameter>&sigma;</parameter> > 0.
				The normal distribution is defined as:
				<mediaobject>
	  			<imageobject role="fo"><imagedata  format="SVG"  fileref="Dummy.svg"/></imageobject>
  				<imageobject role="html"><imagedata  format="EMF"  fileref="Dnorm.emf"/></imageobject>
				</mediaobject>
			</para>
		</simplesect>
	</section>
</section>
